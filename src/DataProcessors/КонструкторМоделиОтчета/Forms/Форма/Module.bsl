&НаКлиенте
Процедура КомандаПолучитьТекстМоделиОтчета(Команда)
	КомандаПолучитьТекстМоделиОтчетаНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаПолучитьТекстМоделиОтчетаНаСервере()
	СхемаКомпоновкиДанных = ОбщегоНазначения.ЗначениеИзСтрокиXML(Объект.ТекстСКД);
	МодельТекста = Общий.МодельТекста()
		.Добавить("МодельСхемыКомпоновки = Общий.МодельСхемыКомпоновкиДанных();")
	;
	Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			МодельТекста
				.Добавить("ТекстЗапроса = """)
				.ГруппировкаНачать()
					.Присоединить(СтрЗаменить(НаборДанных.Запрос, Символы.ПС, Символы.ПС + "|"))
					.Присоединить(""";")
				.ГруппировкаЗавершить()
				.Добавить("МодельСхемыКомпоновки.НаборДанныхЗапрос(ТекстЗапроса, ""{1}"")", НаборДанных.Имя)
			;
		КонецЕсли;
		Измерения = РаботаСМассивом.АТДМассив(НаборДанных.Поля)
			.Отобрать("Элемент.Роль.Измерение")
			.Отобразить("Новый Структура('Поле, Значение', Элемент.Поле, Элемент)")
			.ВМассив()
		;
		Ресурсы = РаботаСМассивом.АТДМассив(СхемаКомпоновкиДанных.ПоляИтога)
			.Отобразить("Новый Структура('Поле, Значение', Элемент.ПутьКДанным, Элемент)")
			.ВМассив()
		;
		Периоды = РаботаСМассивом.АТДМассив(НаборДанных.Поля)
			.Отобрать("Элемент.Роль.НомерПериода > 0")
			.Отобразить("Новый Структура('Поле, НомерПериода, Значение', Элемент.ПутьКДанным, Элемент.Роль.НомерПериода, Элемент)")
			.СортироватьПо("НомерПериода")
			.ВМассив()
		;
		Реквизиты = РаботаСМассивом.АТДМассив(НаборДанных.Поля)
			.Отобрать("Параметры.НайтиЭлемент(СтрШаблон('Элемент.Поле = ''%1''', Элемент.Поле)) = Неопределено", , РаботаСМассивом.АТДМассив(Измерения))
			.Отобрать("Параметры.НайтиЭлемент(СтрШаблон('Элемент.Поле = ''%1''', Элемент.Поле)) = Неопределено", , РаботаСМассивом.АТДМассив(Ресурсы))
			.Отобрать("Параметры.НайтиЭлемент(СтрШаблон('Элемент.Поле = ''%1''', Элемент.Поле)) = Неопределено", , РаботаСМассивом.АТДМассив(Периоды))
			.ВМассив()
		;
		Если ЗначениеЗаполнено(Измерения) Тогда
			МодельТекста
				.ГруппировкаНачать()
				.Добавить(".Измерения()")
				.ГруппировкаНачать()
			;
			Для Каждого Поле Из Измерения Цикл
				ПолеНабораДанных = НаборДанных.Поля.Найти(Поле.Поле);
				Если ПолеНабораДанных = Неопределено Тогда
					ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(Поле.Поле);
					Если ВычисляемоеПоле = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					//  Вычисляемое поле
					МодельТекста.Добавить(".ВычисляемоеПоле(""{1}"", , ""{2}"")", Поле.Поле, СтрЗаменить(ВычисляемоеПоле.Выражение, """", """"""));
					Продолжить;
				КонецЕсли;
				Роль = ПолеНабораДанных.Роль;
				Если Роль.Счет Тогда
					Если Роль.ВыражениеВидаСчета = Поле.Поле + ".Вид" Тогда
						МодельТекста
							.Добавить(".Счет(""{1}"")", Поле.Поле)
						;
					Иначе
						МодельТекста
							.Добавить(".Счет(""{1}"", ""{2}"")", Поле.Поле, Роль.ВыражениеВидаСчета)
						;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				МодельТекста
					.Добавить(".Поле(""{1}"")", Поле.Поле)
				;
			КонецЦикла;
			МодельТекста
				.ГруппировкаЗавершить()
				.ГруппировкаЗавершить()
			;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты) ИЛИ ЗначениеЗаполнено(Периоды) Тогда
			МодельТекста
				.ГруппировкаНачать()
				.Добавить(".Реквизиты()")
				.ГруппировкаНачать()
			;
			Для Каждого Поле Из Периоды Цикл
				МодельТекста
					.Добавить(".Период(""{1}"")", Поле.Поле)
				;
			КонецЦикла;
			Для Каждого Поле Из Реквизиты Цикл
				МодельТекста
					.Добавить(".Поле(""{1}"")", Поле.Поле)
				;
			КонецЦикла;
			МодельТекста
				.ГруппировкаЗавершить()
				.ГруппировкаЗавершить()
			;
		КонецЕсли;

		Если ЗначениеЗаполнено(Ресурсы) Тогда
			МодельТекста
				.ГруппировкаНачать()
					.Добавить(".Ресурсы()")
					.ГруппировкаНачать()
			;
			Для Каждого Поле Из Ресурсы Цикл
				ПолеНабораДанных = НаборДанных.Поля.Найти(Поле.Поле);
				Если ПолеНабораДанных = Неопределено Тогда
					ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(Поле.Поле);
					Если ВычисляемоеПоле = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					//  Вычисляемое поле
					МодельТекста.Добавить(".ВычисляемоеПоле(""{1}"", , ""{2}"")", Поле.Поле, СтрЗаменить(ВычисляемоеПоле.Выражение, """", """"""));
					Продолжить;
				КонецЕсли;
				Роль = ПолеНабораДанных.Роль;
				Если Роль.Остаток Тогда
					Если ЗначениеЗаполнено(Роль.ПолеСчета) Тогда
						Если Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток Тогда
							Если ПолеНабораДанных.Поле = Поле.Поле Тогда
								МодельТекста.Добавить(".НачальныйОстаток(""{1}"", , ""{2}"", ""{3}"", ""{4}"")", ПолеНабораДанных.Поле, Роль.ГруппаОстатка, Роль.ТипБухгалтерскогоОстатка, Роль.ПолеСчета);
							Иначе
								МодельТекста.Добавить(".НачальныйОстаток(""{1}"", ""{2}"", ""{3}"", ""{4}"", ""{5}"")", ПолеНабораДанных.Поле, Поле.Поле, Роль.ГруппаОстатка, Роль.ТипБухгалтерскогоОстатка, Роль.ПолеСчета);
							КонецЕсли;
						ИначеЕсли Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток Тогда
							Если ПолеНабораДанных.Поле = Поле.Поле Тогда
								МодельТекста.Добавить(".КонечныйОстаток(""{1}"", , ""{2}"", ""{3}"", ""{4}"")", ПолеНабораДанных.Поле, Роль.ГруппаОстатка, Роль.ТипБухгалтерскогоОстатка, Роль.ПолеСчета);
							Иначе
								МодельТекста.Добавить(".КонечныйОстаток(""{1}"", ""{2}"", ""{3}"", ""{4}"", ""{5}"")", ПолеНабораДанных.Поле, Поле.Поле, Роль.ГруппаОстатка, Роль.ТипБухгалтерскогоОстатка, Роль.ПолеСчета);
							КонецЕсли;
						Иначе
												
						КонецЕсли;
					Иначе
						Если Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток Тогда
							Если ПолеНабораДанных.Поле = Поле.Поле Тогда
								МодельТекста.Добавить(".НачальныйОстаток(""{1}"", , ""{2}"")", ПолеНабораДанных.Поле, Роль.ГруппаОстатка);
							Иначе
								МодельТекста.Добавить(".НачальныйОстаток(""{1}"", ""{2}"", ""{3}"")", ПолеНабораДанных.Поле, Поле.Поле, Роль.ГруппаОстатка);
							КонецЕсли;
						ИначеЕсли Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток Тогда
							Если ПолеНабораДанных.Поле = Поле.Поле Тогда
								МодельТекста.Добавить(".КонечныйОстаток(""{1}"", , ""{2}"")", ПолеНабораДанных.Поле, Роль.ГруппаОстатка);
							Иначе
								МодельТекста.Добавить(".КонечныйОстаток(""{1}"", ""{2}"", ""{3}"")", ПолеНабораДанных.Поле, Поле.Поле, Роль.ГруппаОстатка);
							КонецЕсли;
						Иначе
												
						КонецЕсли;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Если ПолеНабораДанных.Поле = Поле.Поле Тогда
					МодельТекста.Добавить(".Сумма(""{1}"")", ПолеНабораДанных.Поле);
				Иначе
					МодельТекста.Добавить(".Сумма(""{1}"", ""{2}"")", ПолеНабораДанных.Поле, Поле.Поле);
				КонецЕсли;
			КонецЦикла;	
			МодельТекста
					.ГруппировкаЗавершить()
				.ГруппировкаЗавершить()
			;
		КонецЕсли;
		Если ЗначениеЗаполнено(СхемаКомпоновкиДанных.Параметры) Тогда
			МодельТекста
				.ГруппировкаНачать()
					.Добавить(".Параметры()")
					.ГруппировкаНачать()
			;
			Для Каждого Параметр Из СхемаКомпоновкиДанных.Параметры Цикл
				МодельТекста.Добавить(".Параметр(""{1}"")", Параметр.Имя);
				Если ЗначениеЗаполнено(Параметр.Выражение) Тогда
					МодельТекста.Присоединить(".Выражение(""{1}"")", Параметр.Выражение);
				КонецЕсли;
			КонецЦикла;
			МодельТекста
					.ГруппировкаЗавершить()
				.ГруппировкаЗавершить()
			;
		КонецЕсли;
		МодельТекста
			.Добавить(";")
		;
	КонецЦикла;
	//////////////////////////////////////////////////
	//  Настройки
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	МодельТекста
		.Добавить("МодельНастройкиКомпоновки = Общий.МодельНастройкиКомпоновкиДанных(МодельСхемыКомпоновки.СхемаКомпоновкиДанных)")
//		.Добавить(";")
//		.Добавить("МодельНастройкиКомпоновки")
		.ГруппировкаНачать()	
	;
	ВывестиВыбранныеПоля(МодельТекста, Настройки.Выбор.Элементы);
	Если ЗначениеЗаполнено(Настройки.Отбор.Элементы) Тогда
		МодельТекста
			.Добавить(".Условия()")
			.ГруппировкаНачать()	
		;
		ВывестиУсловияОтбора(МодельТекста, Настройки.Отбор.Элементы);
		МодельТекста
			.ГруппировкаЗавершить()
		;
	КонецЕсли;
	//  Структура
	Если ЗначениеЗаполнено(Настройки.Структура) Тогда
		МодельТекста
			.Добавить(".Структура()")
			.ГруппировкаНачать()
				.Добавить(".ГруппировкаНачать()")
				.ГруппировкаНачать()	
		;
		ВывестиГруппировку(МодельТекста, Настройки.Структура);
		МодельТекста
				.ГруппировкаЗавершить()
				.Добавить(".ГруппировкаЗавершить()")
			.ГруппировкаЗавершить()
		;
		Для Каждого ЭлементПорядка Из Настройки.Порядок.Элементы Цикл
			Если ТипЗнч(ЭлементПорядка) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
				//Автопорядок
				Продолжить;
			КонецЕсли;
			Если ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
				МодельТекста.Добавить(".Порядок(""{1}"")", ЭлементПорядка.Поле);
			Иначе
				МодельТекста.Добавить(".Порядок(""{1}"", ""-"")", ЭлементПорядка.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	МодельТекста
		.ГруппировкаЗавершить()
	;
	////////////////////////////////////////////////
	//  Параметры выовда
	ПараметрыВывода = РаботаСМассивом.АТДМассив(Настройки.ПараметрыВывода.Элементы)
		.Отобрать("Элемент.Использование")
		.Отобразить("Новый Структура('Параметр, Значение', Элемент.Параметр, Элемент.Значение)")
		.ВМассив()
	;
	Если ЗначениеЗаполнено(ПараметрыВывода) Тогда
		МодельТекста
			.ГруппировкаНачать()
				.Добавить(".ПараметрыВывода()")
				.ГруппировкаНачать()				
		;
		Для Каждого ПараметрВывода Из ПараметрыВывода Цикл
			МодельТекста.Добавить(".Параметр(""{1}"", ""{2}"")", ПараметрВывода.Параметр, ПараметрВывода.Значение);
		КонецЦикла;
		МодельТекста
				.ГруппировкаЗавершить()
			.ГруппировкаЗавершить()
		;
	КонецЕсли;
	МодельТекста
		.Добавить(";")
	;
	////////////////////////////////////////////////
	//  Вывод в табличный документ
	МодельТекста
		.Добавить("МодельМакетаКомпоновки = Общий.МодельМакетаКомпоновкиДанных()")
//		.Добавить(";")
//		.Добавить("МодельМакетаКомпоновки")
		.ГруппировкаНачать()
			.Добавить("//  Формирование макета и вывод отчета")
			.Добавить(".Схема(МодельСхемыКомпоновки.СхемаКомпоновкиДанных)")
			.Добавить(".Настройки(МодельНастройкиКомпоновки.Настройки)")
			.Добавить(".Скомпоновать()")
//			.Добавить(".ИдентификаторТаблицы()")
			.Добавить(".ВывестиВТабличныйДокумент(ДокументРезультат)")
		.ГруппировкаЗавершить()
		.Добавить(";")
	;
	Объект.ТекстМодели = МодельТекста.ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьСхему1(Команда)
	ЗагрузитьСхему("Схема1");
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСхему(ИмяСхемы)
	_Обработка = РеквизитФормыВЗначение("Объект");
	Макет = _Обработка.ПолучитьМакет(ИмяСхемы);
	Объект.ТекстСКД = ОбщегоНазначения.ЗначениеВСтрокуXML(Макет);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьСхемуДемоОборотноСальдоваяВедомость(Команда)
	ЗагрузитьСхему("ДемоОборотноСальдоваяВедомость");
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьСхемуДемоОтчетПоСчетамНаОплатуГлобальный(Команда)
	ЗагрузитьСхему("ДемоОтчетПоСчетамНаОплатуГлобальный");
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформировать(Команда)
	КомандаСформироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаСформироватьНаСервере()
	Перем МодельСхемыКомпоновки;
	Перем МодельНастройкиКомпоновки;
	Перем МодельМакетаКомпоновки;
	ДокументРезультат = Новый ТабличныйДокумент;
	УстановитьБезопасныйРежим(Истина);
	Выполнить(Объект.ТекстМодели);
	Объект.Результат = ДокументРезультат;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьСхемуКомпоновкиДанных(Команда)
	Текст = ПолучитьСхемуКомпоновкиДанных();
	Текст.Показать("Схема компоновки данных");
КонецПроцедуры

&НаСервере
Функция ПолучитьСхемуКомпоновкиДанных()
	Перем МодельСхемыКомпоновки;
	Перем МодельНастройкиКомпоновки;
	Перем МодельМакетаКомпоновки;
	ДокументРезультат = Новый ТабличныйДокумент;
	УстановитьБезопасныйРежим(Истина);
	Выполнить(Объект.ТекстМодели);
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(ОбщегоНазначения.ЗначениеВСтрокуXML(МодельСхемыКомпоновки.СхемаКомпоновкиДанных));
	Возврат Текст; 
КонецФункции

Процедура ВывестиГруппировку(МодельТекста, Группировка)
	Для Каждого ЭлементГруппировки Из Группировка Цикл
		Для Каждого ПолеГруппировки Из ЭлементГруппировки.ПоляГруппировки.Элементы Цикл
			Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
				МодельТекста.Добавить(".ПолеГруппировки(""*"")");
			Иначе
				МодельТекста.Добавить(".ПолеГруппировки(""{1}"")", ПолеГруппировки.Поле);
			КонецЕсли;
		КонецЦикла;
		ВывестиВыбранныеПоля(МодельТекста, ЭлементГруппировки.Выбор.Элементы);
		Если ЗначениеЗаполнено(ЭлементГруппировки.Структура) Тогда
			МодельТекста
				.Добавить(".ГруппировкаНачать()")
					.ГруппировкаНачать()	
			;
			ВывестиГруппировку(МодельТекста, ЭлементГруппировки.Структура);
			МодельТекста
					.ГруппировкаЗавершить()	
				.Добавить(".ГруппировкаЗавершить()")
			;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ВывестиВыбранныеПоля(МодельТекста, Элементы)
	Для Каждого ВыбранноеПоле Из Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			МодельТекста
				.Добавить(".ГруппаНачать(""{1}"")", ВыбранноеПоле.Заголовок)
					.ГруппировкаНачать()
			;
			ВывестиВыбранныеПоля(МодельТекста, ВыбранноеПоле.Элементы);
			МодельТекста
					.ГруппировкаЗавершить()
				.Добавить(".ГруппаЗавершить()")
			;
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			МодельТекста
				.Добавить(".Поле(""*"")")
			;
		Иначе
			МодельТекста
				.Добавить(".Поле(""{1}"")", ВыбранноеПоле.Поле)
			;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиУсловияОтбора(МодельТекста, Элементы)
	Для Каждого ЭлементОтбора Из Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				МодельТекста
					.Добавить(".ОтборГруппаИНачать()")
				;
			ИначеЕсли ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				МодельТекста
					.Добавить(".ОтборГруппаИЛИНачать()")
				;
			Иначе
				МодельТекста
					.Добавить(".ОтборГруппаНЕНачать()")
				;
			КонецЕсли;
			МодельТекста
					.ГруппировкаНачать()
			;
			ВывестиУсловияОтбора(МодельТекста, ЭлементОтбора.Элементы);
			МодельТекста
					.ГруппировкаЗавершить()
				.Добавить(".ОтборГруппаЗавершить()")
			;
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			МодельТекста
				.Добавить(".Отбор(""{1}"", ""{2}"")", ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение)
			;
		Иначе
			МодельТекста
				.Добавить(".Отбор(""{1}"", ""{2}"", ВидСравненияКомпоновкиДанных.{3})", ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение, ОбщийКлиентСервер.CamelCase(ЭлементОтбора.ВидСравнения))
			;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
